(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
// Generated by CoffeeScript 2.5.1
(function() {
  var GridWidth, SquareWidth, canvas, clear, ctx, drawAll, drawPiece, game, initGrid, loadOthello, offset, player, rc, update;

  SquareWidth = Math.min(window.innerWidth, window.innerHeight) * .8;

  GridWidth = SquareWidth / 8;

  canvas = document.getElementById("canvas");

  canvas.width = canvas.height = SquareWidth * 1.1;

  offset = (canvas.width - SquareWidth) * .5;

  ctx = canvas.getContext("2d");

  rc = rough.canvas(canvas);

  game = newGame();

  player = 1;

  clear = function() {
    return ctx.clearRect(0, 0, canvas.width, canvas.height);
  };

  initGrid = function(row, column) {
    var startX, startY;
    startX = offset + row * GridWidth;
    startY = column * GridWidth;
    rc.rectangle(startX, startY, GridWidth, GridWidth, {
      fill: "rgba(10, 150, 10, 0.4)",
      fillWeight: 3
    });
    return drawPiece(row, column);
  };

  drawPiece = function(row, column) {
    var piece, startX, startY;
    startX = offset + row * GridWidth;
    startY = column * GridWidth;
    piece = game.board.squares[column][row];
    switch (piece._pieceType) {
      case "BLANK":
        return null;
      case "WHITE":
        return rc.circle(startX + GridWidth * .5, startY + GridWidth * .5, GridWidth * .85, {
          fill: "white",
          fillStyle: "solid"
        });
      case "BLACK":
        return rc.circle(startX + GridWidth * .5, startY + GridWidth * .5, GridWidth * .85, {
          fill: "black",
          fillStyle: "solid"
        });
      default:
        return null;
    }
  };

  drawAll = function() {
    var col, i, results, row;
    results = [];
    for (row = i = 0; i <= 7; row = ++i) {
      results.push((function() {
        var j, results1;
        results1 = [];
        for (col = j = 0; j <= 7; col = ++j) {
          results1.push(drawPiece(row, col));
        }
        return results1;
      })());
    }
    return results;
  };

  update = function() {
    var _, c, i, len, r, ref, results, row;
    clear();
    ref = game.board.squares;
    results = [];
    for (r = i = 0, len = ref.length; i < len; r = ++i) {
      row = ref[r];
      results.push((function() {
        var j, len1, results1;
        results1 = [];
        for (c = j = 0, len1 = row.length; j < len1; c = ++j) {
          _ = row[c];
          results1.push(initGrid(r, c));
        }
        return results1;
      })());
    }
    return results;
  };

  loadOthello = function() {
    return update();
  };

  $(function() {
    return loadOthello();
  });

  canvas.addEventListener('click', function(event) {
    var col, row, x, y;
    [x, y] = getMousePosition(canvas, event);
    row = Math.floor((x - offset) / GridWidth);
    col = Math.floor(y / GridWidth);
    if (row < 0 || row > 7 || col < 0 || col > 7 || game.board.squares[row][col]._pieceType !== "BLANK") {
      return;
    }
    if (!game.board.isPlaceableSquare(col, row, [reversi.PIECE_TYPES.WHITE, reversi.PIECE_TYPES.BLACK][player])) {
      return;
    }
    place(game, col, row);
    drawAll();
    player++;
    player %= 2;
    return document.getElementById("turn").innerHTML = `${["White", "Black"][player]}'s turn`;
  });

}).call(this);

},{}]},{},[1]);

},{}]},{},[1]);
