// Generated by CoffeeScript 2.5.1
(function() {
  var GridWidth, SquareWidth, canvas, clear, ctx, drawPiece, globalData, initGrid, loadOthello, offset, original, player, rc, update;

  SquareWidth = Math.min(window.innerWidth, window.innerHeight) * .8;

  GridWidth = SquareWidth / 8;

  canvas = document.getElementById("canvas");

  canvas.width = canvas.height = SquareWidth * 1.1;

  offset = (canvas.width - SquareWidth) * .5;

  ctx = canvas.getContext("2d");

  rc = rough.canvas(canvas);

  original = [[-1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, 0, 1, -1, -1, -1], [-1, -1, -1, 1, 0, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1]];

  globalData = original;

  player = 1;

  clear = function() {
    return ctx.clearRect(0, 0, canvas.width, canvas.height);
  };

  initGrid = function(row, column) {
    var startX, startY;
    startX = offset + row * GridWidth;
    startY = column * GridWidth;
    rc.rectangle(startX, startY, GridWidth, GridWidth, {
      fill: "rgba(10, 150, 10, 0.4)",
      fillWeight: 3
    });
    return drawPiece(row, column);
  };

  drawPiece = function(row, column) {
    var piece, startX, startY;
    startX = offset + row * GridWidth;
    startY = column * GridWidth;
    piece = globalData[row][column];
    switch (piece) {
      case -1:
        return null;
      case 0:
        return rc.circle(startX + GridWidth * .5, startY + GridWidth * .5, GridWidth * .85, {
          fill: "white",
          fillStyle: "solid"
        });
      case 1:
        return rc.circle(startX + GridWidth * .5, startY + GridWidth * .5, GridWidth * .85, {
          fill: "black",
          fillStyle: "solid"
        });
      default:
        return null;
    }
  };

  update = function() {
    var _, c, i, len, r, results, row;
    clear();
    results = [];
    for (r = i = 0, len = globalData.length; i < len; r = ++i) {
      row = globalData[r];
      results.push((function() {
        var j, len1, results1;
        results1 = [];
        for (c = j = 0, len1 = row.length; j < len1; c = ++j) {
          _ = row[c];
          results1.push(initGrid(r, c));
        }
        return results1;
      })());
    }
    return results;
  };

  loadOthello = function() {
    globalData = localStorage.getItem("save");
    if (globalData === null) {
      globalData = original;
    }
    return update();
  };

  $(function() {
    return loadOthello();
  });

  canvas.addEventListener('click', function(event) {
    var col, row, x, y;
    [x, y] = getMousePosition(canvas, event);
    row = Math.floor((x - offset) / GridWidth);
    col = Math.floor(y / GridWidth);
    if (row < 0 || row > 7 || col < 0 || col > 7 || globalData[row][col] !== -1) {
      return;
    }
    globalData[row][col] = player;
    drawPiece(row, col);
    player++;
    player %= 2;
    return document.getElementById("turn").innerHTML = `${["White", "Black"][player]}'s turn`;
  });

}).call(this);
